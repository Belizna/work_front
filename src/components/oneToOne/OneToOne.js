import { useEffect, useState, useRef } from "react";
import { SearchOutlined } from '@ant-design/icons';
import Highlighter from 'react-highlight-words';
import { Form, Input, Popconfirm, Table, Space, Select, Typography, Card, Button, DatePicker } from 'antd';
import axios from "axios";
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc'

dayjs.extend(utc);

const { TextArea } = Input;
const dateFormat = 'DD-MM-YYYY'

const EditableCell = ({
  editing,
  dataIndex,
  title,
  inputType,
  record,
  index,
  children,
  ...restProps
}) => {
  const inputNode = inputType === 'select' ? <Select
    options={[
      {
        value: '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
        label: '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
      },
      {
        value: '–ù–µ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
        label: '–ù–µ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
      },
    ]} /> :
    inputType === 'priority' ? <Select
      options={[
        {
          value: '–í—ã—Å–æ–∫–∏–π',
          label: '–í—ã—Å–æ–∫–∏–π',
        },
        {
          value: '–°—Ä–µ–¥–Ω–∏–π',
          label: '–°—Ä–µ–¥–Ω–∏–π',
        },
        {
          value: '–ù–∏–∑–∫–∏–π',
          label: '–ù–∏–∑–∫–∏–π',
        },
      ]} /> : inputType === 'date' ?
      <DatePicker format={{ format: dateFormat }} />
      : inputType === 'input' ? <Input /> : <TextArea />;
  return (
    <td {...restProps}>
      {editing ? (
        <Form.Item
          name={dataIndex}
          style={{
            margin: 0,
          }}
          rules={[
            {
              required: true,
              message: `Please Input ${title}!`,
            },
          ]}
        >
          {inputNode}
        </Form.Item>
      ) : (
        children
      )}
    </td>
  );
};

const OneToOne = ({ assignment_employee }) => {
  const [countSave, setCountSave] = useState(0);

  useEffect(() => {
    axios.get(`${process.env.REACT_APP_API_URL}/oneToOne/${assignment_employee}`)
      .then((res) => setData(res.data.oneToOne))
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [countSave])

  const [form] = Form.useForm();
  const [data, setData] = useState([]);
  const [editingKey, setEditingKey] = useState('');
  const isEditing = (record) => record._id === editingKey;
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(5);
  const [searchText, setSearchText] = useState('');
  const [searchedColumn, setSearchedColumn] = useState('');
  const searchInput = useRef(null);
  const handleSearch = (selectedKeys, confirm, dataIndex) => {
    confirm();
    setSearchText(selectedKeys[0]);
    setSearchedColumn(dataIndex);
  };
  const handleReset = (clearFilters) => {
    clearFilters();
    setSearchText('');
  };

  const getColumnSearchProps = (dataIndex) => ({
    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters, close }) => (
      <div
        style={{
          padding: 8,
        }}
        onKeyDown={(e) => e.stopPropagation()}
      >
        <Input
          ref={searchInput}
          placeholder={`–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏`}
          value={selectedKeys[0]}
          onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}
          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}
          style={{
            marginBottom: 8,
            display: 'block',
          }}
        />
        <Space>
          <Button
            type="primary"
            onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}
            icon={<SearchOutlined />}
            size="small"
            style={{
              width: 90,
            }}
          >
            –ü–æ–∏—Å–∫
          </Button>
          <Button
            onClick={() => clearFilters && handleReset(clearFilters)}
            size="small"
            style={{
              width: 90,
            }}
          >
            –°–±—Ä–æ—Å
          </Button>
          <Button
            type="link"
            size="small"
            onClick={() => {
              close();
            }}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </Space>
      </div>
    ),
    filterIcon: (filtered) => (
      <SearchOutlined
        style={{
          color: filtered ? '#1677ff' : undefined,
        }}
      />
    ),
    onFilter: (value, record) =>
      record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),
    onFilterDropdownOpenChange: (visible) => {
      if (visible) {
        setTimeout(() => searchInput.current?.select(), 100);
      }
    },
    render: (text) =>
      searchedColumn === dataIndex ? (
        <Highlighter
          highlightStyle={{
            padding: 0,
          }}
          searchWords={[searchText]}
          autoEscape
          textToHighlight={text ? text.toString() : ''}
        />
      ) : (
        text
      ),
  });

  const handleDelete = async (record) => {
    const newData = data.filter((item) => item._id !== record._id);
    await axios.delete(`${process.env.REACT_APP_API_URL}/oneToOne/delete/${record._id}`)
    setData(newData);
  };

  const add = (record) => {
    form.setFieldsValue({
      oneToOne_agenda: '',
      oneToOne_protocol: '',
      ...record,
    });
    setEditingKey(record._id);
  };

  const edit = (record) => {
    form.setFieldsValue({
      oneToOne_date: (dayjs.utc(record.oneToOne_date, dateFormat)),
      oneToOne_agenda: record.oneToOne_agenda,
      oneToOne_protocol: record.oneToOne_protocol,
      oneToOne_status: record.oneToOne_status,
    });
    setEditingKey(record._id);
  };

  const cancel = (_id) => {
    try {
      if (typeof _id === 'number') {
        const newData = data.filter((item) => item._id !== _id);
        setData(newData);
        setEditingKey('');
      }
      else setEditingKey('');
    }
    catch (errInfo) {
      console.log('Cancel error:', errInfo);
    }
  };

  const save = async (_id) => {
    try {
      const row = await form.validateFields();
      const newData = [...data];
      const index = newData.findIndex((item) => _id === item._id);
      if (index > -1) {
        const item = newData[index];
        newData.splice(index, 1, {
          ...item,
          ...row,
        });
        setData(newData);
        setEditingKey('');
        typeof _id === 'number' ? await axios.post(`${process.env.REACT_APP_API_URL}/oneToOne/add/${assignment_employee}`, row)
          : await axios.patch(`${process.env.REACT_APP_API_URL}/oneToOne/edit/${_id}`, row)
        setCountSave(countSave + 1)
      } else {
        newData.push(row);
        setData(newData);
        setEditingKey('');
      }
    } catch (errInfo) {
      console.log('Validate Failed:', errInfo);
    }
  };
  const columns = [
    {
      title: '–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏',
      dataIndex: 'oneToOne_date',
      width: '10%',
      editable: true,
      ...getColumnSearchProps('oneToOne_date')
    },
    {
      title: '–ü–æ–≤–µ—Å—Ç–∫–∞ –≤—Å—Ç—Ä–µ—á–∏',
      dataIndex: 'oneToOne_agenda',
      width: '25%',
      editable: true,
      ...getColumnSearchProps('oneToOne_agenda'),
      render: (text) => (
        <div style={{ whiteSpace: "pre-wrap", wordBreak: "break-word" }}>
          {text}
        </div>
      )
    },
    {
      title: '–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏',
      dataIndex: 'oneToOne_protocol',
      width: '25%',
      editable: true,
      ...getColumnSearchProps('oneToOne_protocol'),
      render: (text) => (
        <div style={{ whiteSpace: "pre-wrap", wordBreak: "break-word" }}>
          {text}
        </div>
      )
    },
    {
      title: '–°—Ç–∞—Ç—É—Å',
      dataIndex: 'oneToOne_status',
      width: '7%',
      editable: true,
      defaultFilteredValue: ['–ù–µ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ'],
      filters: [
        {
          text: '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
          value: '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ'
        },
        {
          text: '–ù–µ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
          value: '–ù–µ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ'
        }
      ],
      onFilter: (value, record) => record.oneToOne_status.startsWith(value)
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      dataIndex: 'operation',
      width: '10%',
      render: (_, record) => {
        const editable = isEditing(record);
        return editable ? (
          /* eslint-disable */
          <span>
            <Typography.Link
              onClick={() => save(record._id)}
              style={{
                marginRight: 8,
              }}
            >
              Save
            </Typography.Link>
            <Popconfirm title="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?" onConfirm={() => cancel(record._id)}>
              <a>Cancel</a>
            </Popconfirm>
          </span>
        ) : (
          <>
            <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)} style={{ marginRight: 8 }}>
              Edit
            </Typography.Link>
            <Popconfirm title="–£–≤–µ—Ä–µ–Ω –≤ —É–¥–∞–ª–µ–Ω–∏–∏?" onConfirm={() => handleDelete(record)}>
              <a>Delete</a>
            </Popconfirm>
          </>
          /* eslint-enable */
        );
      },
    },
  ];
  const mergedColumns = columns.map((col) => {
    if (!col.editable) {
      return col;
    }
    return {
      ...col,
      onCell: (record) => ({
        record,
        inputType: col.dataIndex === 'oneToOne_status' ?
          'select' : col.dataIndex === 'oneToOne_date' ?
            'date' : 'text',
        dataIndex: col.dataIndex,
        title: col.title,
        editing: isEditing(record),
      }),
    };
  });

  const handleAdd = async () => {
    setPage(Math.ceil((data.length + 1) / pageSize))
    const newData = {
      _id: Math.random(),
      oneToOne_agenda: `üßë‚Äçüíª –ü—Ä–æ –∑–∞–¥–∞—á–∏ –∏ —Ä–∞–±–æ—Ç—É:
        ‚Ä¢ –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è?
        ‚Ä¢ –ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ —Ä—É—Ç–∏–Ω–Ω–æ–µ/–±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–µ, –æ—Ç —á–µ–≥–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è?
        ‚Ä¢ –ß—Ç–æ –≤ —Ä–∞–±–æ—Ç–µ –¥–∞—ë—Ç—Å—è —Å–ª–æ–∂–Ω–µ–µ –≤—Å–µ–≥–æ?
        ‚Ä¢  –ï—Å—Ç—å –ª–∏ —Å–µ–π—á–∞—Å –±–ª–æ–∫–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ?
        ‚Ä¢  –ß—Ç–æ –±—ã —Ç—ã –∏–∑–º–µ–Ω–∏–ª –≤ –Ω–∞—à–µ–º —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ?

ü§ù –ü—Ä–æ –∫–æ–º–∞–Ω–¥—É –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é:"
        ‚Ä¢  –ö–∞–∫ —Ç–µ–±–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥–æ–π?
        ‚Ä¢  –° –∫–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ—â–µ –≤—Å–µ–≥–æ? –° –∫–µ–º —Å–ª–æ–∂–Ω–µ–µ?
        ‚Ä¢  –ß—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏ —Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –∫–æ–ª–ª–µ–≥?
        ‚Ä¢  –ï—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–æ–∏—Ç –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?
        ‚Ä¢  –ß—Ç–æ –±—ã —É–ª—É—á—à–∏–ª–æ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É?

üéØ –ü—Ä–æ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é:"
        ‚Ä¢  –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Ä–∞–∑–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 6‚Äì12 –º–µ—Å—è—Ü–µ–≤?
        ‚Ä¢  –•–æ—á–µ—à—å –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–æ–ª–∏ –∏–ª–∏ –∑–∞–¥–∞—á–∏?
        ‚Ä¢  –ö–∞–∫ —Ç—ã –≤–∏–¥–∏—à—å —Å–≤–æ—ë —Ä–∞–∑–≤–∏—Ç–∏–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏?
        ‚Ä¢  –ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –±—ã—Ç—å –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º?
        ‚Ä¢  –ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ –Ω–∞–æ–±–æ—Ä–æ—Ç –¥–µ–º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç?

üó£ –ü—Ä–æ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"
        ‚Ä¢  –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å –º–æ—é —Ä–∞–±–æ—Ç—É –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è?
        ‚Ä¢  –ß–µ–≥–æ –±—ã —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ –æ—Ç –º–µ–Ω—è?
        ‚Ä¢  –ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ —è –º–æ–≥ –±—ã –¥–µ–ª–∞—Ç—å –∏–Ω–∞—á–µ, —á—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å?
        ‚Ä¢  –ü–æ–ª—É—á–∞–µ—à—å –ª–∏ —Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏?
        ‚Ä¢  –ö–∞–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?

üå± –õ–∏—á–Ω–æ–µ –∏ –±–∞–ª–∞–Ω—Å"
        ‚Ä¢  –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ —Ü–µ–ª–æ–º (—ç–Ω–µ—Ä–≥–∏—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)?
        ‚Ä¢  –£–¥–∞—ë—Ç—Å—è –ª–∏ –¥–µ—Ä–∂–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é?
        ‚Ä¢  –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Ö–æ–±–±–∏/–∏–Ω—Ç–µ—Ä–µ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å—Å—è?
        ‚Ä¢  –ß—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏ —Ç—ã —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏–ª–∏ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ?
        ‚Ä¢  –ö–∞–∫ –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å —Ç–µ–±–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ?
        
‚ö° –§–æ—Ä–º–∞—Ç ¬´–±–ª–∏—Ü¬ª (–µ—Å–ª–∏ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏)"
        ‚Ä¢  –ß—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ —Å–µ–π—á–∞—Å?
        ‚Ä¢  –ß—Ç–æ –±–µ—Å–∏—Ç —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ?
        ‚Ä¢  –ì–¥–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?
        ‚Ä¢  –ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª–∞ ¬´–≤–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞¬ª ‚Äî —á—Ç–æ –±—ã —Ç—ã –∏–∑–º–µ–Ω–∏–ª –≤ –∫–æ–º–ø–∞–Ω–∏–∏?`,
      oneToOne_protocol: '',
      oneToOne_status: '–ù–µ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ'
    };
    setData([...data, newData])
    add(newData)
  };
  return (
    <div className="assignment">
      <Card title={assignment_employee} style={{ width: 1180 }}>
        <Form form={form} component={false}>
          <Table style={{ width: 1200 }}
            components={{
              body: {
                cell: EditableCell,
              },
            }}
            bordered
            dataSource={data}
            columns={mergedColumns}
            pagination={{
              current: page,
              pageSize: pageSize,
              onChange: (page, pageSize) => {
                setPage(page)
                setPageSize(pageSize)
              },
            }}>
          </Table>
        </Form>
        <Button
          onClick={handleAdd}
          type="primary"
          style={{
            marginTop: 10,
          }}>
          –î–æ–±–∞–≤–∏—Ç—å –ø–æ–≤–µ—Å—Ç–∫—É
        </Button>
      </Card>
    </div>

  );
}

export default OneToOne;